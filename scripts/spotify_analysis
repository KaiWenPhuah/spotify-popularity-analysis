library(ggcorrplot)
library(readr)
library(tidyverse)
library(tidytext)
library(DT)

# Collect and Data Wrangle -----------------------------------------------------------

?theme

spotify <- read_csv("Coding/projects/spotify/top10s.csv")
View(spotify)

colnames(spotify)
head(spotify)
str(spotify)
summary(spotify)

# Data Cleaning -----------------------------------------------------------

# From the dataset, we can see that column 1 has a name of "...1".
# We will rename it as Song No.

colnames(spotify)[1] <- "Song no."
colnames(spotify)[4] <-  "top_genre"

colnames(spotify)


# We will list the unique values for the columns

unique(spotify$"top genre")
unique(spotify$year)


# We will now find if there are any missing values

spotify %>% 
  summarize(across(everything(), ~sum(is.na(.))))


# ~ is shorthand for saying:"For each column, apply this function."
# . stands for "current column"

# From the summary(spotify), we notice that there are values where the min is 0, 
# we will now filter out the values to find if there are rows with meaningless values


spotify %>% 
  filter(
    bpm == 0,
    nrgy == 0,
    dnce == 0,
    live == 0,
    val == 0,
    acous == 0,
    spch == 0,
    pop == 0
  )

# We can find out that there is one row - Adele's Million Years Ago has several values of '0' across the columns
# We will now filter it out to not affect our research

spotify <- spotify %>% 
  filter(!title == "Million Years Ago")


# We will now check if any songs has appeared twice

spotify %>% 
  add_count(title, artist) %>% 
  filter(n > 1) %>% 
  arrange(title)  


# As we can see, there are a total of 16 duplicated songs with on year apart between them. We will remove the year after they have been originally released

spotify <-  spotify %>% 
  arrange(year) %>% 
  distinct(title, artist, .keep_all = TRUE)


# We will see if there are others type of values in their respective data type of column

spotify %>% 
  select(title, artist, top_genre) %>% 
  sapply(is.character)

spotify %>% 
  select(year:pop) %>% 
  sapply(is.numeric)

# sapply ( simplified apply ) also used to apply a function to each element (usually columns or list elements)
  

# Data Transformation ------------------------------------------------------

# We will be simplifying the top_genre columns into a total of 27 columns
#generalizing all pop as one category and all hip hop as one category
#generalizing all r&b as one category and all edm as one category


unique(spotify$"top genre")

genre <-  function(x, y){
  str_detect(x, y)
}


spotify <- spotify %>% 
  mutate(top_genre = case_when(
    genre(top_genre, "hip hop") ~ "hip hop",
    genre(top_genre, "pop") ~ "pop",
    genre(top_genre, "r&b") ~ "r&b",
    genre(top_genre, "edm") ~ "edm",
    TRUE ~ top_genre)) 


unique(spotify$top_genre)


# DATA ANALYSIS
# Various statistics were obtained through the analysis process:


# Top 10 songs over 2010-2019

spotify_popularity <- spotify %>% 
  slice_max(pop, n = 10)

View(spotify_popularity)


# -------------------------------------------------------------------------

# Top 10 songs for each 2010-2019

spotify_yearly_popularity <- spotify %>% 
  group_by(year) %>% 
  slice_max(pop, n = 10) %>% 
  ungroup()

View(spotify_yearly_popularity)


# -------------------------------------------------------------------------

# Highest rated song of the year

spotify_top_song_per_year <-  spotify %>% 
  group_by(year) %>% 
  slice_max(pop, n = 1)

View(spotify_top_song_per_year)


# -------------------------------------------------------------------------

# Mean Duration Genre-wise

genre_duration <-  spotify %>% 
  group_by(top_genre) %>% 
  summarize(avg_duration = round(mean(dur, na.rm = TRUE),1)) %>% 
  arrange(avg_duration)

View(genre_duration)
      

# -------------------------------------------------------------------------

# Number of songs released by every artist.

spotify_artist_songs <- spotify %>% 
  count(artist) %>% 
  arrange(desc(n))

View(spotify_artist_songs)


# -------------------------------------------------------------------------

# Highest energy and dancebility songs

highest_positivity <-  spotify %>% 
  slice_max(nrgy, n = 10)

View(highest_positivity)

highest_dancebility <-  spotify %>% 
  slice_max(dnce, n = 10)

View(highest_dancebility)


# -------------------------------------------------------------------------

# Most popular artist in 2019

popular_artist <-  spotify %>% 
  filter(year == 2019) %>% 
  group_by(artist) %>% 
  summarize(pop = mean(pop),
            total_songs = n()) %>% 
  arrange(-pop, -total_songs) %>% 
  slice_max(pop, n = 15)

View(popular_artist)

# -------------------------------------------------------------------------

# Top 5 Genres Per Year

top5_genres <- spotify %>% 
  group_by(year) %>% 
  count(top_genre) %>% 
  filter(! n == 0) %>% 
  slice_max(n, n = 5) %>% 
  ungroup()
    
View(top5_genres)

            

# -------------------------------------------------------------------------

# Average popularity of Songs Per Year

avg_popularity_per_year <- spotify %>% 
  group_by(year) %>% 
  summarize(avg_pop = round(mean(pop)))

View(avg_popularity_per_year)


# -------------------------------------------------------------------------

# Average Bpm of Songs Per Year

average_bpm <-  spotify %>% 
  group_by(year) %>% 
  summarize(abg_bpm = round(mean(bpm)))

View(average_bpm)


# -------------------------------------------------------------------------

# Average Duration of Songs Per Year

average_duration_per_year <- spotify %>% 
  group_by(year) %>% 
  summarize(avg_duration = mean(dur))

View(average_duration_per_year)


# -------------------------------------------------------------------------

# How Acoustic are the songs Per Year

acoustic_per_year <- spotify %>% 
  group_by(year) %>% 
  summarize(acousticity = mean(acous))

View(acoustic_per_year)


# -------------------------------------------------------------------------

#Data Visualization

# We will now visualize the correlation of eeach column with the help of correlation matrix

num_vars <- spotify %>% select(where(is.numeric) & !"Song no.")
corr_matrix <- cor(num_vars, use = "complete.obs")
ggcorrplot(corr_matrix, type = "lower", lab = TRUE)


# We will now visualize the average durations of songs for each genre

ggplot(genre_duration)+
  geom_bar(aes(x = fct_reorder(top_genre, avg_duration), y = avg_duration, fill = top_genre), stat="identity")+
  theme_minimal()+
  labs(
    title = "Average Song Duration for Each Genre",
    subtitle = "Duration Measured in Seconds (s)",
    y = "Song Genres",
    x = "Song Duration"
  )+
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 14),
    axis.title = element_text(size = 12),
    legend.position = "none"
  )+
  coord_flip()



# -------------------------------------------------------------------------

# Total Song Genres Over the Years

ggplot(top5_genres)+
  geom_bar(aes(x = reorder_within(top_genre, n, year), y = n, fill = top_genre),stat = "identity")+
  labs(
    title = "Top Song Genres Per Year",
    subtitle = "y-axis is adjusted according to each plot",
    x = "Song Genres",
    y = "Total"
  )+
  theme_minimal()+
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    axis.text.x = element_blank()
  )+
  facet_wrap(~year, scales = "free_x")


# -------------------------------------------------------------------------

# We will visualize the average duration of songs per year

ggplot(average_duration_per_year)+
  geom_bar(aes(x = year, avg_duration, fill = year), stat = "identity")+
  scale_x_continuous(breaks = seq(2010,2019, 3))+
  labs(
    title = "Average Duration of Songs Per Year",
    subtitle = "Measured in Seconds (s)"
    )+
  theme_minimal()+
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )



# -------------------------------------------------------------------------

# Correlation between bpm and pop

ggplot(spotify)+
  geom_point(aes(x = bpm , y = pop))+
  geom_smooth(aes(x = bpm , y = pop), method = "loess")+
  labs(
    title = "Correlation between bpm and pop"
  )

cor(spotify$bpm, spotify$pop)
#  -0.02182574
# We can conclude that there is no relationship between the two variables and it means Faster songs are not necessarily more or less popular.


# -------------------------------------------------------------------------

# Correlation between nrgy and pop

ggplot(spotify)+
  geom_point(aes(x = nrgy, y = pop))+
  geom_smooth(aes(x = nrgy, y = pop), method = "loess")+
  labs(
    title = "Correlation between nrgy and pop"
  )

cor(spotify$nrgy, spotify$pop)
# -0.08629634
# We can conclude that there is no relationship between the two variables and it means songs with more energy does not necessarily more or less popular.


# -------------------------------------------------------------------------

# Correlation between dnce and pop

ggplot(spotify)+
  geom_point(aes(x = dnce, y = pop))+
  geom_smooth(aes(x = dnce, y = pop))+
  labs(
    title = "Correlation between dnce and pop"
  )

cor(spotify$dnce, spotify$pop)
#  0.08355897
# We can conclude that there is no relationship between the two variables and it means songs that can dance does not necessarily more or less popular.

# -------------------------------------------------------------------------

# Correlation between dB and pop

ggplot(spotify)+
  geom_point(aes(x = dB, y = pop))+
  geom_smooth(aes(x = dB, y = pop))+
  labs(
    title = "Correlation between decibels and pop"
  )

cor(spotify$dB, spotify$pop)
# 0.02458066
# # We can conclude that there is no relationship between the two variables and it means louder songs does not necessarily more or less popular.

# -------------------------------------------------------------------------

# Correlation between live and pop

ggplot(spotify)+
  geom_point(aes(x = live, y = pop))+
  geom_smooth(aes(x = live, y = pop))+
  labs(
    title = "Correlation between live and pop"
  )

cor(spotify$live, spotify$pop)
# -0.08545923
# We can conclude that there is no relationship between the two variables and it means live songs does not necessarily more or less popular.

# -------------------------------------------------------------------------

# Correlation between val and pop

ggplot(spotify)+
  geom_point(aes(x = val, y = pop))+
  geom_smooth(aes(x = val, y = pop))+
  labs(
    title = "Correlation between valence and pop"
  )

cor(spotify$val, spotify$pop)
#  0.02615975
# We can conclude that there is no relationship between the two variables and it means positive songs does not necessarily more or less popular.

# -------------------------------------------------------------------------

# Correlation between dur and pop

ggplot(spotify)+
  geom_point(aes(x = dur, y = pop))+
  geom_smooth(aes(x = dur, y = pop))+
  labs(
    title = "Correlation between duration and pop"
  )

cor(spotify$dur, spotify$pop)
# -0.1011977
# There is a very weak negative linear relationship between song duration and popularity, meaning longer songs tend to be slightly less popular, but the correlation is negligible.


# -------------------------------------------------------------------------

# Correlation between acous and pop

ggplot(spotify)+
  geom_point(aes(x = acous, y = pop))+
  geom_smooth(aes(x = acous, y = pop))+
  labs(
    title = "Correlation between acoustic and pop"
  )

cor(spotify$acous, spotify$pop)
# 0.01482497
# We can conclude that there is no relationship between the two variables and it means acoustic songs does not necessarily more or less popular.

# -------------------------------------------------------------------------

# Correlation between spch and pop

ggplot(spotify)+
  geom_point(aes(x = spch, y = pop))+
  geom_smooth(aes(x = spch, y = pop))+
  labs(
    title = "Correlation between speechiness and pop"
  )

cor(spotify$spch, spotify$pop)
# -0.05143706
# # We can conclude that there is no relationship between the two variables and it means speechiness does not necessarily more or less popular.


# CONCLUSION: Only duration has a weak linear relationship between them with a shorter duration proved to be the more popular among listeners
# while other factors do not play a role in affecting the popularity of the songs

